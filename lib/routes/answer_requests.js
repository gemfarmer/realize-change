// Generated by CoffeeScript 1.6.3
(function() {
  var GlobalAnswer, mongoose, passport, request, shuffledDreams, shuffledGoals, user, _;

  mongoose = require('mongoose');

  GlobalAnswer = require('./../models/answers');

  user = require('./../models/user');

  passport = require('passport');

  request = require('request');

  _ = require('underscore');

  (function() {
    var sb;
    sb = function(f) {
      var i, o;
      i = this.length;
      while (i) {
        o = this[--i];
        this[i] = [].concat(f.call(o, o, i), o);
      }
      this.sort(function(a, b) {
        var len;
        i = 0;
        len = a.length;
        while (i < len) {
          if (a[i] !== b[i]) {
            return (a[i] < b[i] ? -1 : 1);
          }
          ++i;
        }
        return 0;
      });
      i = this.length;
      while (i) {
        this[--i] = this[i][this[i].length - 1];
      }
      return this;
    };
    if (typeof Object.defineProperty === "function") {
      try {
        Object.defineProperty(Array.prototype, "sortBy", {
          value: sb
        });
      } catch (_error) {}
    }
    if (!Array.prototype.sortBy) {
      return Array.prototype.sortBy = sb;
    }
  })();

  exports.sendanswer = function(req, res) {
    var newDate, newGlobalAnswer, newUser;
    console.log("answerquery", req.query);
    newGlobalAnswer = new GlobalAnswer();
    newGlobalAnswer.answerFuture = req.query.answerFuture;
    newGlobalAnswer.answerGoals = req.query.answerGoals;
    newGlobalAnswer.date = new Date();
    newGlobalAnswer.ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
    newGlobalAnswer.save(function(err) {
      if (err) {
        throw err;
      }
    });
    if (req.user) {
      return user.find({
        _id: "" + req.user._id
      }, function(err, userToUpdate) {
        var ip;
        ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
        return userToUpdate[0].update({
          answers: {
            answerFuture: req.query.answerFuture,
            answerGoals: req.query.answerGoals
          }
        }, function(err) {
          if (err) {
            throw err;
          }
          return res.send({
            success: "success"
          });
        });
      });
    } else {
      console.log("else");
      newUser = new user();
      newUser.ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
      newDate = new Date();
      newUser.date = newDate;
      newUser.answers = {
        answerFuture: req.query.answerFuture,
        answerGoals: req.query.answerGoals
      };
      console.log(newUser);
      return newUser.save(function(err) {
        if (err) {
          throw err;
        }
        console.log("New user, " + newUser.name + ", was created", newUser.answers);
        return res.send({
          success: "success"
        });
      });
    }
  };

  shuffledDreams = [];

  shuffledGoals = [];

  exports.getanswers = function(req, res) {
    var randomAnswer, sortAsc, sortDesc;
    console.log("query", req.query);
    sortAsc = function() {
      return GlobalAnswer.find({}, function(err, results) {
        var sortedResults;
        sortedResults = results.sortBy(function() {
          return [this.votes];
        });
        return res.send({
          answers: sortedResults
        });
      });
    };
    sortDesc = function() {
      return GlobalAnswer.find({}, function(err, results) {
        var sortedResults;
        sortedResults = results.sortBy(function() {
          return [-this.votes];
        });
        return res.send({
          answers: sortedResults
        });
      });
    };
    randomAnswer = function() {
      return GlobalAnswer.find({}, function(err, choice) {
        var answerIDs;
        console.log("choice", choice);
        answerIDs = _.map(choice, function(item) {
          return item._id.toString();
        });
        return user.find({
          _id: "" + req.user._id
        }, function(err, users) {
          var differenceArray, option, optionString, randOne, randTwo, sendClientResponse, shuffled, _i, _len;
          sendClientResponse = function(choiceOne, choiceTwo, done) {
            return res.send({
              answers: [choiceOne, choiceTwo],
              filterNone: true,
              done: done
            });
          };
          differenceArray = _.difference(answerIDs, users[0].optionsSeen);
          shuffled = _.shuffle(differenceArray);
          randOne = {};
          randTwo = {};
          for (_i = 0, _len = choice.length; _i < _len; _i++) {
            option = choice[_i];
            optionString = option._id.toString();
            if (optionString === shuffled[0]) {
              randOne = option;
            }
            if (optionString === shuffled[1]) {
              randTwo = option;
            } else {

            }
          }
          if (differenceArray.length > 1) {
            return sendClientResponse(randOne, randTwo, false);
          } else {
            return sendClientResponse(randOne, randTwo, true);
          }
        });
      });
    };
    if (req.query.randomize === 'true') {
      console.log("true");
      return randomAnswer();
    } else if (req.query.asc === 'true') {
      return sortAsc();
    } else if (req.query.desc === 'true') {
      return sortDesc();
    } else if (req.query.future === 'true') {
      console.log('all dreams');
      return GlobalAnswer.find({}, function(err, answers) {
        var answersToSend, arrayLength, i, more;
        console.log("err:", err);
        answersToSend = [];
        i = 0;
        more = true;
        arrayLength = req.query.dreamsToShow;
        if (arrayLength === '10') {
          shuffledDreams = _.shuffle(answers);
        }
        if (answers.length < arrayLength) {
          arrayLength = answers.length;
          more = false;
        }
        while (i < arrayLength) {
          answersToSend.push({
            answerFuture: shuffledDreams[i].answerFuture,
            filterFuture: "future",
            more: more
          });
          i++;
        }
        return res.send({
          answers: answersToSend
        });
      });
    } else if (req.query.goals === 'true') {
      console.log('all dreams');
      return GlobalAnswer.find({}, function(err, answers) {
        var answer, answersToSend, _i, _len;
        answersToSend = [];
        for (_i = 0, _len = answers.length; _i < _len; _i++) {
          answer = answers[_i];
          answersToSend.push({
            answerGoals: answer.answerGoals,
            filterGoals: "goals"
          });
        }
        return res.send({
          answers: answersToSend
        });
      });
    } else {
      return GlobalAnswer.find({}, function(err, answers) {
        var answersToSend, arrayLength, i, more;
        answersToSend = [];
        i = 0;
        more = true;
        arrayLength = req.query.goalsToShow;
        if (arrayLength === '10') {
          shuffledGoals = _.shuffle(answers);
        }
        if (answers.length < arrayLength) {
          arrayLength = answers.length;
          more = false;
        }
        while (i < arrayLength) {
          answersToSend.push({
            answerGoals: shuffledGoals[i].answerGoals,
            votes: shuffledGoals[i].votes,
            filterNone: "none",
            more: more
          });
          i++;
        }
        return res.send({
          answers: answersToSend
        });
      });
    }
  };

}).call(this);
