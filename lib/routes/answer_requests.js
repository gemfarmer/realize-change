// Generated by CoffeeScript 1.6.3
(function() {
  var GlobalAnswer, mongoose, user;

  mongoose = require('mongoose');

  GlobalAnswer = require('./../Models/answers');

  user = require('./../Models/User');

  exports.sendanswer = function(req, res) {
    var newGlobalAnswer;
    console.log("answerquery", req.query);
    newGlobalAnswer = new GlobalAnswer();
    newGlobalAnswer.answerFuture = req.query.answerFuture;
    newGlobalAnswer.answerGoals = req.query.answerGoals;
    newGlobalAnswer.save(function(err) {
      if (err) {
        throw err;
      }
    });
    console.log(req.user.name);
    return user.find({
      name: "" + req.user.name
    }, function(err, userToUpdate) {
      userToUpdate[0].update({
        answers: {
          answerFuture: req.query.answerFuture,
          answerGoals: req.query.answerGoals
        }
      }, function(err) {
        if (err) {
          throw err;
        }
      });
      return res.send({
        success: "success"
      });
    });
  };

  exports.getanswers = function(req, res) {
    var randomAnswer;
    console.log("query", req.query);
    randomAnswer = function() {
      var randOne, randTwo;
      randOne = 0;
      randTwo = 0;
      GlobalAnswer.count({}, function(err, num) {
        var secondRandom;
        console.log("err", err);
        randOne = Math.floor(Math.random() * num);
        console.log("first", randOne);
        secondRandom = function() {
          var output;
          output = Math.floor(Math.random() * num);
          console.log("second", output);
          if (output === randOne) {
            return secondRandom();
          } else {
            return output;
          }
        };
        return randTwo = secondRandom();
      });
      return GlobalAnswer.find({}, function(err, choice) {
        console.log({
          answers: [choice[randOne], choice[randTwo]],
          filterNone: true
        });
        return res.send({
          answers: [choice[randOne], choice[randTwo]],
          filterNone: true
        });
      });
    };
    if (req.query.randomize === 'true') {
      return randomAnswer();
    } else if (req.query.future === 'true') {
      console.log('all dreams');
      return GlobalAnswer.find({}, function(err, answers) {
        var answer, answersToSend, _i, _len;
        console.log("err:", err);
        console.log("answer", answers);
        answersToSend = [];
        for (_i = 0, _len = answers.length; _i < _len; _i++) {
          answer = answers[_i];
          answersToSend.push({
            answerFuture: answer.answerFuture,
            filterFuture: "future"
          });
        }
        return res.send({
          answers: answersToSend
        });
      });
    } else if (req.query.goals === 'true') {
      console.log('all dreams');
      return GlobalAnswer.find({}, function(err, answers) {
        var answer, answersToSend, _i, _len;
        console.log("err:", err);
        console.log("answer", answers);
        answersToSend = [];
        for (_i = 0, _len = answers.length; _i < _len; _i++) {
          answer = answers[_i];
          answersToSend.push({
            answerGoals: answer.answerGoals,
            filterGoals: "goals"
          });
        }
        return res.send({
          answers: answersToSend
        });
      });
    } else {
      return GlobalAnswer.find({}, function(err, answers) {
        var answer, answersToSend, _i, _len;
        console.log("err:", err);
        console.log("answer", answers);
        answersToSend = [];
        for (_i = 0, _len = answers.length; _i < _len; _i++) {
          answer = answers[_i];
          answersToSend.push({
            answerGoals: answer.answerGoals,
            answerFuture: answer.answerFuture,
            filterNone: "none"
          });
        }
        return res.send({
          answers: answersToSend
        });
      });
    }
  };

}).call(this);
